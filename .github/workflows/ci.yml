name: CI

# Controls when the workflow will run
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  style:
    # Checks the code style
    runs-on: ubuntu-latest
    
    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: sudo apt install clang-format
      
      # Checks for code to follow LLVM format using clang-format
      - name: Check Code Style
        run: find src/ res/shaders/ -regex '.*\.\(cpp\|hpp\|h\|frag\|vert\)' -exec clang-format -style=file -i {} \; && git diff --exit-code


  build-linux-clang:
    # Making on a Linux distribution
    runs-on: ubuntu-latest

    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt install ninja-build libgl-dev libglx-dev libglu1-mesa-dev libgl1-mesa-dev mesa-common-dev libxrandr-dev libxinerama-dev libx11-dev libxcursor-dev libxi-dev

      # Some projects don't allow in-source building, so create a separate build directory
      - name: Create Build Environment
        run: |
          mkdir ${{runner.workspace}}/build_test

      # Use a bash shell for rgw same syntax regardless of the host OS
      - name: Configure CMake
        shell: bash
        env:
          CC: clang
          CXX: clang++
        working-directory: ${{runner.workspace}}/build_test
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G"Unix Makefiles"

      # Exports CC and CXX to tell CMake which compiler to use; runs CMake
      - name: Build CMake with Clang
        working-directory: ${{runner.workspace}}/build_test
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

  build-linux-gcc:
    # Making on a Linux distribution
    runs-on: ubuntu-latest

    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          sudo apt install ninja-build libgl-dev libglx-dev libglu1-mesa-dev libgl1-mesa-dev mesa-common-dev libxrandr-dev libxinerama-dev libx11-dev libxcursor-dev libxi-dev

      # Some projects don't allow in-source building, so create a separate build directory
      - name: Create Build Environment
        run: |
          mkdir ${{runner.workspace}}/build_test

      # Use a bash shell for rgw same syntax regardless of the host OS
      - name: Configure CMake
        shell: bash
        env:
          CC: gcc
          CXX: g++
        working-directory: ${{runner.workspace}}/build_test
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G"Unix Makefiles"

      # Exports CC and CXX to tell CMake which compiler to use; runs CMake
      - name: Build CMake with GCC
        working-directory: ${{runner.workspace}}/build_test
        shell: bash
        run: cmake --build . --config $BUILD_TYPE